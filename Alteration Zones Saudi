/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["5_6_Argillic"],"min":1.0567656327503314,"max":1.157383580086888,"palette":["ff0000","008000","0000ff"]},
    imageVisParam2 = {"opacity":1,"bands":["7_6_Argillic"],"min":0.8322188708586927,"max":0.9352778035536434,"palette":["ff0000","008000","0000ff"]},
    imageVisParam3 = {"opacity":1,"bands":["7_5_Argillic"],"min":0.7471907373391543,"max":0.8495982887683892,"palette":["ff0000","008000","0000ff"]},
    imageVisParam4 = {"opacity":1,"bands":["1_2_3_5_SiFe"],"min":0.9499492429374372,"max":1.2273142720145247,"palette":["ff0000","008000","0000ff"]},
    imageVisParam5 = {"opacity":1,"bands":["14_12_SiFe"],"min":0.9460478176825871,"max":1.0794202917564721,"palette":["ff0000","008000","0000ff"]};
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[41.28225659530846, 26.065147602505938],
          [41.28225659530846, 26.010238633878146],
          [41.342080585176625, 26.010238633878146],
          [41.342080585176625, 26.065147602505938]]], null, false);
          
//Instert Polygon 

Map.addLayer(geometry)

//INSERTING DATASET--------------------------------------------------------------------------------------------------
var collectionDN = ee.ImageCollection('ASTER/AST_L1T_003');

//AREA SELECTION---------------------------------------------------------------------------------------------------- 

// define area of interest

var AOI = geometry

//Defining dark object point for atmospheric scattering correction. 
var drkobjct = ee.Geometry.Point(41.31197, 26.03726);
print('dark pixel',drkobjct);

// set base map to show satellite+roads
Map.setOptions('Hybrid', {});
// center base map to area of interest
Map.centerObject(AOI, 13);

//VISUALIZATION PARAMETERS---------------------------------------------------------------------------------------

var dnVis = {min: [65.0,70.0,70.0],max: [100.0,150.0,110.0], bands: ['B3N','B02','B01']};
var radVis1 = {min: [50.0,50.0,53.0],max: [90.0,120.0,80.0], bands: ['B3N','B02','B01']};
var regVis = {min: [1.128,0.697,1.050],max: [1.853,1.530,1.780], bands: ['B3N_1','B3N_2','B04_1']};
var dnVis1 = {min: [361,309,1],max: [4241,2913,1961], bands: ['B3N','B02','B01']};
var radVis = {min: [25.0,20.0,20.0],max: [110.0,150.0,130.0], bands: ['B3N','B02','B01']};

//SPATIAL FILTERING---------------------------------------------------------------------------------------------

// collect ASTER images that have less than 10% clouds in the area during the specified time period
var filtereddata = collectionDN
        .filterBounds(AOI)
        .filterDate('2000-01-01', '2008-01-30')
          .filterMetadata('CLOUDCOVER', 'less_than', 5);
        
      
//print the amount of images present in the collection after filtering  
print('Amount of images present: ', filtereddata.size());

//Preprocessing--------------------------------------------------------------------------------------------------

//Spectral Correction 
//Conversion of raw data into radiance data

var spectralCorrection = function(collection) {
 
  collection = collection.map(raw2rad);
        return(collection);

   function raw2rad(img){
    return img.select('B01').float().subtract(1).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B01','G01')).rename('B01')
       .addBands(img.select('B02').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B02','G02')).rename('B02'))
       .addBands(img.select('B3N').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B3N','G3N')).rename('B3N'))
       .addBands(img.select('B04').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B04','G04')).rename('B04'))
       .addBands(img.select('B05').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B05','G05')).rename('B05'))
       .addBands(img.select('B06').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B06','G06')).rename('B06'))
       .addBands(img.select('B07').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B07','G07')).rename('B07'))
       .addBands(img.select('B08').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B08','G08')).rename('B08'))
       .addBands(img.select('B09').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B09','G09')).rename('B09'))
       .addBands(img.select('B10').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B10','G10')).rename('B10'))
       .addBands(img.select('B11').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B11','G11')).rename('B11'))
       .addBands(img.select('B12').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B12','G12')).rename('B12'))
       .addBands(img.select('B13').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B13','G13')).rename('B13'))
       .addBands(img.select('B14').float().subtract(1.0).multiply(ee.Image(img).metadata('GAIN_COEFFICIENT_B14','G14')).rename('B14'))
       .set('system:time_start', img.get('system:time_start'))
       .setMulti(img.toDictionary());
  }
  
 };

//Application of spectral correction function to the image collection
var collectionRAD = spectralCorrection(filtereddata);
print('ASTER RADIANCE',collectionRAD);

//MOSAIC----------------------------------------------------------------------------------------------------------------

//Mosaicking is done to spatially assemble image datasets to produce a spatially continuous image.
//can also be done after masking for clouds, water and vegetation. 
//Need to change the masking functions to match image collections if mosaicing is done after masking

//application of mosiac
var mosaic = collectionRAD.mosaic(); 
//Map.addLayer(mosaic,radVis) 
print('mosiac: ', mosaic);

//Clipping the data to the area of interest
var mosaic_AOI =  mosaic.clip(AOI);

//CLOUD MASKING-----------------------------------------------------------------------------------------------------------


/*
Dark pixel substraction method to reduce atmospheric scattering
A reflectance of dark target due to atmosphere only was assumed. Defined above in the code as "dark pixel". 
This value was substracted from all radiances for each channel separately.
*/

var darkPixelSubstraction = function(img)
{
    return img.select('B01').subtract(43.940000000000005).rename('B01')
  .addBands(img.select('B02').subtract(26.904).rename('B02'))
  .addBands(img.select('B3N').subtract(19.826).rename('B3N'))
  .addBands(img.select('B04').subtract(2.6088).rename('B04'))
  .addBands(img.select('B05').subtract(0.8351999999999999).rename('B05'))
  .addBands(img.select('B06').subtract(0.6875).rename('B06'))
  .addBands(img.select('B07').subtract(0.7164).rename('B07'))
  .addBands(img.select('B08').subtract(0.4587).rename('B08'))
  .addBands(img.select('B09').subtract(0.47700000000000004).rename('B09'))
  .addBands(img.select('B10').subtract(8.04996).rename('B10'))
  .addBands(img.select('B11').subtract(8.79366).rename('B11'))
  .addBands(img.select('B12').subtract(9.311670000000001).rename('B12'))
  .addBands(img.select('B13').subtract(9.438994000000001).rename('B13'))
  .addBands(img.select('B14').subtract(8.992225).rename('B14'))
  .set('system:time_start', img.get('system:time_start'));
};

//function to mask thick clouds from the image. 
//Clouds are assumed as very bright objects that have values more than 150 in B1 bands

function maskCloud(image) {
  var thickcloudProb = image.select('B01');
  var cloud = thickcloudProb.gt(150);
  var mask = cloud.eq(0);
  print('Thick clouds mask: ',mask);
  return image.updateMask(mask).
  set('system:time_start', image.get('system:time_start'));
}

//Application of cloudmaking function to the image
var Cloudmasked = ee.Image(maskCloud(mosaic));

Map.addLayer(Cloudmasked,radVis,'Cloudmasked')

//Application of correction of atmospheric scattering function to the image
var darkpixsub = ee.Image(darkPixelSubstraction(Cloudmasked));

//INDEXES FOR WATER SOIL VEGETATION-----------------------------------------------------------------

//Following indexes were defined to help with masking for vegetation water and bare soil

//function to calculate NDVI(Normalized Difference Vegetation Index), SAVI(Soil-Adjusted Vegetation Index) and NDWI(Normalized Difference Water Index) for the image
var NDVI_SAVI_MNDWI = function(img){
    return img
    .normalizedDifference(['B3N', 'B02']).rename('NDVI').float() //NDVI index
    .addBands(img.expression(
      '(1 + L) * float(nir - red)/ (nir + red + L)', {
        'nir': img.select('B3N'),
        'red': img.select('B02'),
        'L': 0.5
      }).rename('SAVI')).float() //SAVI index
      .addBands(img.normalizedDifference(['B01', 'B3N']).rename('NDWI')).float() //NDWI index
      .addBands(img.select('B01').rename('B01'))
      .addBands(img.select('B02').rename('B02'))
      .addBands(img.select('B3N').rename('B3N'))
      .addBands(img.select('B04').rename('B04'))
      .addBands(img.select('B05').rename('B05'))
      .addBands(img.select('B06').rename('B06'))
      .addBands(img.select('B07').rename('B07'))
      .addBands(img.select('B08').rename('B08'))
      .addBands(img.select('B09').rename('B09'))
      .addBands(img.select('B10').rename('B10'))
      .addBands(img.select('B11').rename('B11'))
      .addBands(img.select('B12').rename('B12'))
      .addBands(img.select('B13').rename('B13'))
      .addBands(img.select('B14').rename('B14'))
    .set('system:time_start', img.get('system:time_start'));
  };

//Application of NDVI,SAVI,MNDWI function to the image
var NDVI_SAVI_MNDWI = ee.Image(NDVI_SAVI_MNDWI(Cloudmasked));
print('NDVI_SAVI_MNDWI Output: ',NDVI_SAVI_MNDWI);


//MASKING FOR WATER AND VEGETATION=-------------------------------------------------------------

//mask for water using band values. Here values less than 0 in band B06 is identified as water
function WaterMask1(image) {
    var water = image.select('B06');
    var Wter = water.lt(1);
    var mask = Wter.eq(0);
  print('mask: ',mask);
  return image.updateMask(mask)
  set('system:time_start', image.get('system:time_start'));
}

//mask for water using Normalized Difference Water Index(NDWI).Here values less than 0.05 in NDWI index is identified as water
function WaterMask2(image) {
  var water = image.select('NDWI');
  var mask = water.lt(0.05)
  print(' Water mask: ',mask)
  return image.updateMask(mask).
  set('system:time_start', image.get('system:time_start'));
}

//Application of water mask1 to the study area
var watermask1 = ee.Image(WaterMask1(NDVI_SAVI_MNDWI))
//Map.addLayer(watermask1,radVis,'water correction1') 

//water mask 2 is not applied in the script initially. Can be added based on the area to get a more accurate output  
var watermask2 = ee.Image(WaterMask2(NDVI_SAVI_MNDWI))

//mask for vegetation using Normalized Difference Vegetation Index(NDVI)

function VegetationMask(image) {
  var vegetation = image.select('NDVI');
  var mask = vegetation.lt(0.3)
  print('Vegetation mask: ',mask)
  return image.updateMask(mask).
  set('system:time_start', image.get('system:time_start'));
}

//Application of vegetation mask to the study area

var vegetationmask = ee.Image(VegetationMask(watermask1))
Map.addLayer(vegetationmask,radVis,'vegetation correction') 

//Mask to only select bare soil area
//This mask was not used in this script. Can be used to mask vegetation 
function BareSoil(image) {
  var Bare_Soil = image.select('SAVI');
  var mask = Bare_Soil.lt(0.2)
  print('Bare soil mask: ',mask)
  return image.updateMask(mask).
  set('system:time_start', image.get('system:time_start'));
}

//SPECTRAL INDICES-----------------------------------------------------------------------------

// Functions for spectral indices specific to ASTER radiance data
// Function to calculate Normalized Difference Vegetation Index (NDVI) and Soil-Adjusted Vegetation Index (SAVI)

var NDVI_SAVI = function(img){
    return img
    .normalizedDifference(['B3N', 'B02']).rename('NDVI').float() //NDVI index
    .addBands(img.expression(
      '(1 + L) * float(nir - red)/ (nir + red + L)', {
        'nir': img.select('B3N'),
        'red': img.select('B02'),
        'L': 0.5
      }).rename('SAVI')).float() //SAVI index
    .set('system:time_start', img.get('system:time_start'));
  };
  
// application of the function to the image
var NDVI_SAVI = ee.Image(NDVI_SAVI(vegetationmask));
print('NDVI and SAVI Output: ',NDVI_SAVI);

//Clipping the data to the area of interest
var NDVI_SAVI_AOI =  NDVI_SAVI.clip(AOI);
  
//GEOLOGICAL INDICES---------------------------------------------------------------------------------------

//Functions for different Geological indices are scripted below. 
//Each index is scripted as a seperate function because its easier to call each function when necessary

var RegolithRatios = function(img)
{
  return img.addBands(img.select('B3N').divide(img.select('B02')).rename('R'))
  .addBands(img.select('B3N').divide(img.select('B07')).rename('G'))
  .addBands(img.select('B04').divide(img.select('B07')).rename('B'))
  .set('system:time_start', img.get('system:time_start'));
};

//application of spectral indices function to the masked image  
var Regolith_Ratios =  ee.Image(RegolithRatios(vegetationmask));

var GreenVegetationContent = function(img){
    return img
      .addBands(img.expression(
      'B3/B2', {
        'B1': img.select('BN3'),
        'B4': img.select('B02')
      }).float().rename('Green Vegetation Content')).float()
      
    .set('system:time_start', img.get('system:time_start'));
  };

//Function to generate spectral indices for each mineral group 
var SpectralIndices = function(img){
    return img
     .addBands(img.expression(
      'B4/B3N', {
        'B4': img.select('B04'),
        'B3N': img.select('B3N')
      }).float().rename('FerricOxideContent')).float()  
      .addBands(img.expression(
      'B2/B1', {
        'B2': img.select('B02'),
        'B1': img.select('B01')
      }).float().rename('FerricOxideComposition')).float()  
      .addBands(img.expression(
      'B5/B4', {
        'B5': img.select('B05'),
        'B4': img.select('B04')
      }).float().rename('FerrousIronIndex')).float() 
      .addBands(img.expression(
      'B1/B4', {
        'B1': img.select('B01'),
        'B4': img.select('B04')
      }).float().rename('Opaque_index')).float()
      .addBands(img.expression(
      '(B5+B7)/B6', {
        'B5': img.select('B05'),
        'B6': img.select('B06'),
        'B7': img.select('B07')
      }).float().rename('ALOHgroupContent')).float()
      .addBands(img.expression(
      'B5/B7', {
        'B5': img.select('B05'),
        'B7': img.select('B07')
      }).float().rename('ALOHgroupComposition')).float()
      .addBands(img.expression(
      'B4/B6', {
        'B4': img.select('B04'),
        'B6': img.select('B06')
      }).float().rename('HydrousMinerals')).float()
      .addBands(img.expression(
      'B6/B5', {
        'B6': img.select('B06'),
        'B5': img.select('B05')
      }).float().rename('KaolinGroupIndex')).float()
       .addBands(img.expression(
      '(B6+B8)/B7', {
        'B6': img.select('B06'),
        'B7': img.select('B07'),
        'B8': img.select('B08')
      }).float().rename('FeOHGroupContent')).float()
      .addBands(img.expression(
      '(B6+B9)/(B7+B8)', {
        'B6': img.select('B06'),
        'B7': img.select('B07'),
        'B8': img.select('B08'),
        'B9': img.select('B09')
      }).float().rename('MgOHGroupContent')).float()
      .addBands(img.expression(
      'B7/B8', {
        'B7': img.select('B07'),
        'B8': img.select('B08')
      }).float().rename('MgOHGroupComposition')).float()
      .addBands(img.expression(
      'B4/B5', {
        'B4': img.select('B04'),
        'B5': img.select('B05')
      }).float().rename('ArgillicZone')).float()
      .addBands(img.expression(
      '(B4-B5)/(B4+B5)', {
        'B4': img.select('B04'),
        'B5': img.select('B05')
      }).float().rename('ClayIndex')).float()
      .addBands(img.expression(
      'B7/B5', {
        'B7': img.select('B07'),
        'B5': img.select('B05')
      }).float().rename('7_5_Argillic')).float()
      .addBands(img.expression(
      'B7/B6', {
        'B7': img.select('B07'),
        'B6': img.select('B06')
      }).float().rename('7_6_Argillic')).float()
      .addBands(img.expression(
      'B5/B6', {
        'B5': img.select('B05'),
        'B6': img.select('B06')
      }).float().rename('5_6_Argillic')).float()
      .addBands(img.expression(
      'B4/B7', {
        'B4': img.select('B04'),
        'B7': img.select('B07')
      }).float().rename('SericiticZone')).float()
      .addBands(img.expression(
      'B14/B12', {
        'B14': img.select('B14'),
        'B12': img.select('B12')
      }).float().rename('14_12_SiFe')).float()
      .addBands(img.expression(
      '(B1/B2)+(B5/B3N)', {
        'B1': img.select('B01'),
        'B2': img.select('B02'),
        'B3N': img.select('B3N'),
        'B5': img.select('B05')
      }).float().rename('1_2_3_5_SiFe')).float()
    .set('system:time_start', img.get('system:time_start'));
  };

//application of spectral indices function to the masked image  
var GeologicalIndices =  ee.Image(SpectralIndices(vegetationmask));
print('Geological Spectral Indices',GeologicalIndices);

//Clipping the data to the area of interest
var GeologicalIndicesAOI =  GeologicalIndices.clip(AOI);
print('Geological Indices of the Area of Interest: ',GeologicalIndicesAOI);

//Visualizations for Geological Indices-----------------------------------------------------

//Visualizations for alteration minerals are displayed below

Map.addLayer(GeologicalIndicesAOI.select('FerricOxideContent'),{min: 0.21 , max: 0.31 ,palette: ['red','green','blue']},'FeOxideContent');

Map.addLayer(GeologicalIndicesAOI.select('FerricOxideComposition'),{min: 0.87 , max: 1.13 ,palette: ['red','green','blue']},'FerricOxideComposition');

Map.addLayer(GeologicalIndicesAOI.select('FerrousIronIndex'),{min: 0.32 , max: 0.38 ,palette: ['red','green','blue']},'FerrousIronIndex');

Map.addLayer(GeologicalIndicesAOI.select('ALOHgroupContent'),{min: 1.90 , max: 2.07 ,palette: ['red','green','blue']},'ALOHgroupContent');

Map.addLayer(GeologicalIndicesAOI.select('KaolinGroupIndex'),{min: 0.86 , max: 0.94 ,palette: ['red','green','blue']},'KaolinGroupIndex');

Map.addLayer(GeologicalIndicesAOI.select('HydrousMinerals'),{min: 2.88 , max: 3.38 ,palette: ['red','green','blue']},'HydrousMinerals');

Map.addLayer(GeologicalIndicesAOI.select('MgOHGroupContent'),{min: 0.93 , max: 1.05 ,palette: ['red','green','blue']},'MgOHGroupContent');

Map.addLayer(GeologicalIndicesAOI.select('ArgillicZone'),{min: 2.61 , max: 3.05 ,palette: ['red','green','blue']},'ArgillicZone');

Map.addLayer(GeologicalIndicesAOI.select('SericiticZone'),{min: 3.36 , max: 3.74 ,palette: ['red','green','blue']},'SericiticZone');

Map.addLayer(GeologicalIndicesAOI.select('ClayIndex'),{min: 0.44 , max: 0.50 ,palette: ['red','green','blue']},'ClayIndex');

Map.addLayer(GeologicalIndicesAOI.select('7_5_Argillic'),{min: 0.74 , max: 0.84 ,palette: ['red','green','blue']},'7_5_Argillic');

Map.addLayer(GeologicalIndicesAOI.select('7_6_Argillic'),{min: 0.83 , max: 0.93 ,palette: ['red','green','blue']},'7_6_Argillic');

Map.addLayer(GeologicalIndicesAOI.select('5_6_Argillic'),{min: 1.05 , max: 1.15 ,palette: ['red','green','blue']},'5_6_Argillic');

Map.addLayer(GeologicalIndicesAOI.select('14_12_SiFe'),{min: 0.94 , max: 1.07 ,palette: ['red','green','blue']},'14_12_SiFe');

Map.addLayer(GeologicalIndicesAOI.select('1_2_3_5_SiFe'),{min: 0.95 , max: 1.22 ,palette: ['red','green','blue']},'1_2_3_5_SiFe');

/*

//OUTPUT DATA TO DRIVE----------------------------------------------------------------------

//Exports output images to the drive

//Exporting converted radiance data in the area of interest
Export.image.toDrive({
    image: mosaic_AOI,
    description: 'RadianceDataofChosenArea',
    folder: 'ASTER_GEE_Outputs-GRS01',
    fileNamePrefix: 'Aster',
    region: AOI,
    scale: 30,
    maxPixels: 1e9
})
*/

//Exporting spectral indices in the area of interest
Export.image.toDrive({
    image: GeologicalIndicesAOI,
    description: 'Alteration_Minerals_Indices',
    folder: 'ASTER_GEE_Outputs-Saudi',
    fileNamePrefix: 'Aster',
    region: AOI,
    scale: 20,
    maxPixels: 1e9
})
